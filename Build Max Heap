import java.util.*;

class Solution {
    boolean checkHeap(int arr[]) {
        int n = arr.length;
        for (int i = 0; i <= (n - 2) / 2; i++) {
            if (arr[2 * i + 1] > arr[i]) {
                return false;
            }

            if (2 * i + 2 < n && arr[2 * i + 2] > arr[i]) {
                return false;
            }
        }
        return true;
    }
	public void swap(int idx1, int idx2, int[] arr){
		int temp = arr[idx1];
		arr[idx1] = arr[idx2];
		arr[idx2] = temp;
	}
	public void downHeapify(int pi, int n, int[] arr){
		int leftChild = (2 * pi) + 1;
		int rightChild = (2 * pi) + 2;
		int leftValue = leftChild >= n ? Integer.MIN_VALUE : arr[leftChild];
		int rightValue = rightChild >= n ? Integer.MIN_VALUE : arr[rightChild];
		int largestIdx = pi;
		if(arr[largestIdx] < leftValue) largestIdx = leftChild;
		if(arr[largestIdx] < rightValue) largestIdx = rightChild;
		if(largestIdx != pi){
			swap(largestIdx, pi, arr);
			downHeapify(largestIdx, n, arr);
		}
	}
    void buildHeap(int arr[]) {
       int n = arr.length;
		for(int i = n / 2 - 1; i >= 0; i--){
			downHeapify(i, n, arr);
		}
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n;
        n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();
        Solution Obj = new Solution();
        Obj.buildHeap(arr);
        if (Obj.checkHeap(arr)) {
            System.out.println("Correct");
        } else {
            System.out.println("Incorrect");
        }
        sc.close();
    }
}
