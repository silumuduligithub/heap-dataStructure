class Solution {
    public void swap(int idx1, int idx2, int[] arr){
        int temp = arr[idx1];
        arr[idx1] = arr[idx2];
        arr[idx2] = temp;
    }
    public void heapfy(int pi, int n, int[] arr){
        int leftChild = (2 * pi) + 1;
        int rightChild = (2 * pi) + 2;
        int leftValue = leftChild >= n ? Integer.MAX_VALUE : arr[leftChild];
        int rightValue = rightChild >= n ? Integer.MAX_VALUE : arr[rightChild];
        int smallestIdx = pi;
        if(arr[smallestIdx] > leftValue) smallestIdx = leftChild;
        if(arr[smallestIdx] > rightValue) smallestIdx = rightChild;
        if(pi != smallestIdx){
            swap(pi, smallestIdx, arr);
            heapfy(smallestIdx, n, arr);
        }
    }
    public void buildHeap(int[] arr){
        int n = arr.length;
        for(int i = n / 2 - 1; i >= 0; i--){
            heapfy(i, n, arr);
        }
    }
    public int[] sortArray(int[] nums) {
        int n = nums.length;
        buildHeap(nums);
        for(int i = n - 1; i >= 0; i--){
            int temp = nums[0];
            nums[0] = nums[i];
            nums[i] = temp;
            heapfy(0, i, nums);
        }
        int l = 0, r = n - 1;
        while(l < r){
            swap(l, r, nums);
            l++;
            r--;
        }
        return nums;
    }
}
