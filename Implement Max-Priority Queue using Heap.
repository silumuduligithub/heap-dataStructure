import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }
	public void swap(int idx1, int idx2){
		int temp = data.get(idx1);
		data.set(idx1, data.get(idx2));
		data.set(idx2, temp);
	}
	  public void upHeapify(int childIdx){
		if(childIdx == 0)return;
		int parentIdx = (childIdx - 1) / 2;
		if(data.get(childIdx) > data.get(parentIdx)){
			swap(childIdx, parentIdx);
			upHeapify(parentIdx);
		}  
	}
    public void add(int val) {
		data.add(val);
		upHeapify(data.size() - 1);
    }
	public void downHeapify(int pIdx){
		int leftChild = (2 * pIdx) + 1;
		int rightChild = (2 * pIdx) + 2;
		int leftValue = leftChild >= data.size() ? Integer.MIN_VALUE : data.get(leftChild);
		int rightValue = rightChild >= data.size() ? Integer.MIN_VALUE : data.get(rightChild);
		int largestIdx = pIdx;
		if(data.get(largestIdx) < leftValue) largestIdx = leftChild;
		if(data.get(largestIdx) < rightValue) largestIdx = rightChild;
		if(largestIdx != pIdx){
			swap(pIdx, largestIdx);
			downHeapify(largestIdx);
		}
	}
    public int remove() {
      // write your code here
		if(data.size() == 0){
			System.out.println("Underflow");
			return -1;
		}
		swap(0, data.size() - 1);
		int rValue = data.remove(data.size() - 1);
		if(data.size() == 0)return rValue;
		downHeapify(0);
		return rValue;
    }

    public int peek() {
      // write your code here
		if(data.size() == 0){
			System.out.println("Underflow");
			return -1;
		}
		return data.get(0);
    }

    public int size() {
      // write your code here
		return data.size();
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
