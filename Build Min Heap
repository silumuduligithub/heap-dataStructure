class Solution{
void buildHeap(int arr[]) {
		int n = arr.length;
        for(int i = n / 2 - 1; i >= 0; i--){
			upHeapfy(i, arr, n);
		}
    }
	void swap(int idx1, int idx2, int[] arr){
		int temp = arr[idx1];
		arr[idx1] = arr[idx2];
		arr[idx2] = temp;
	}
	void upHeapfy(int pi, int[] arr, int n){
		int leftChild = (2 * pi ) + 1;
		int rightChild = (2 * pi) + 2;
		int leftValue = leftChild >= n ? Integer.MAX_VALUE : arr[leftChild];
		int rightValue = rightChild >= n ? Integer.MAX_VALUE : arr[rightChild];
		int smallestIdx = pi; 
		if(arr[smallestIdx] > leftValue) smallestIdx = leftChild;
		if(arr[smallestIdx] > rightValue) smallestIdx = rightChild;
		if(smallestIdx != pi){
			swap(pi, smallestIdx, arr);
			upHeapfy(smallestIdx, arr, n);
		}
	}
}
